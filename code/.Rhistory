theme(legend.position = 'none')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'PC',
tissue = 'BM')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'PC',
tissue = 'spleen')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'PC',
tissue = 'BM')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'PC',
tissue = 'spleen')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'mem',
tissue = 'BM')
Q
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'mem',
tissue = 'spleen')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'GC',
tissue = 'spleen')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'mem',
tissue = 'spleen')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'GC',
tissue = 'BM')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'nonnaive_IgD+B220+',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'nonnaive_IgD+B220+',
tissue = 'BM')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'nonnaive_IgD+B220+',
tissue = 'spleen')
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations$freqs,
cell_type = 'nonnaive_IgD+B220+',
tissue = 'LN')
pairwise_correlations$freq_ratios
metric <- 'freqs'
metric <- 'freqs'
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freqs)
}
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freqs)
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freqs)
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freqs)
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations,
metric = 'freqs',
cell_type = 'PC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freqs',
cell_type = 'PC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
Q
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freq_ratios)
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
color_key_title <- 'Spearman correlation\nin V gene frequencies'
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freq_ratios)
color_key_title <- 'Spearman correlation\nin V gene frequency deviations from\nnaive repertoire\n'
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = color_key_title)
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
color_key_title <- 'Spearman correlation\nin V gene frequencies'
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freq_ratios)
color_key_title <- 'Spearman correlation\nin V gene frequency deviations\nfrom the naive repertoire\n'
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = color_key_title)
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
# ----- Dendrograms and heatmaps based on correlation in V gene frequency deviations from naive repertoire -------
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'GC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'mem',
tissue = 'LN')
setwd("/Volumes/cobey/mvieira/psc_repertoire/code")
# Plot clone size distributions
library(dplyr)
library(seqinr)
library(stringr)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
library(viridis)
library(forcats)
clone_info_files <- list.files('../results/partis/', pattern = 'clone_info.csv')
clone_info_files <- clone_info_files[!grepl('PSC67D_11521_top_clone',clone_info_files)]
clone_info_files <- paste0('../results/partis/', clone_info_files)
read_clone_info <- function(clone_info_file){
dataset <- str_split(clone_info_file,'\\/')[[1]]
dataset <- str_replace(dataset[length(dataset)],'_clone_info.csv','')
#dataset_type <- ifelse(grepl('plate',dataset),'plate','10x')
clone_info_tibble <- as_tibble(read.csv(clone_info_file)) %>%
mutate(dataset = dataset) %>%
#mutate(dataset = dataset, dataset_type = dataset_type) %>%
mutate(patient = str_replace(str_replace(dataset,'_plate',''),'_HC','')) %>%
select(dataset, patient, everything())
return(clone_info_tibble)
}
clone_info <- lapply(clone_info_files, FUN = read_clone_info)
clone_info <- bind_rows(clone_info)
size_dist <- clone_info %>%
group_by(dataset, patient) %>%
mutate(rel_frequency = n_seqs / sum(n_seqs)) %>%
mutate(abundance_rank = rank(-rel_frequency,ties.method = 'random')) %>%
ungroup()
size_dist
size_dist %>% arrange(abundance_rank == 1)
size_dist %>% arrange(dataset, desc(n_seqs))
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs))
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset)
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC07F')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC07F_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC15E_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC119D_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC19D_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC19D_HC')
size_dist %>% filter(dataset == 'PSC19D_HC', clone_id == 0)
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC19D_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC28D_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC40C_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC4^C_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC46C_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC50B_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC51B_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC59C_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC70D_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC72B_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC79_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC84C_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC94_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC51B_HC')
size_dist %>% group_by(dataset) %>% filter(n_seqs == max(n_seqs)) %>% arrange(dataset) %>% filter(dataset == 'PSC72B_HC')
