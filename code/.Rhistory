}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freqs)
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations_freqs = pairwise_correlations,
metric = 'freqs',
cell_type = 'PC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freqs',
cell_type = 'PC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
Q
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freq_ratios)
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = 'Spearman correlation\nin V gene frequencies')
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
color_key_title <- 'Spearman correlation\nin V gene frequencies'
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freq_ratios)
color_key_title <- 'Spearman correlation\nin V gene frequency deviations from\nnaive repertoire\n'
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = color_key_title)
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
# Clustering based on Spearman correlation of V gene frequencies as an inverse measure of distance.
get_vgene_freq_correlation_clustering <- function(pairwise_correlations, cell_type, tissue, metric){
if(metric == 'freqs'){
data_subset <- pairwise_correlations$freqs %>%
rename(cor_coef = cor_coef_freqs)
color_key_title <- 'Spearman correlation\nin V gene frequencies'
}else{
stopifnot(metric == 'freq_ratios')
data_subset <- pairwise_correlations$freq_ratios %>%
rename(cor_coef = cor_coef_freq_ratios)
color_key_title <- 'Spearman correlation\nin V gene frequency deviations\nfrom the naive repertoire\n'
}
data_subset <- data_subset %>%
filter(total_compartment_seqs_i >= 100, total_compartment_seqs_j >= 100) %>%
filter(cell_type == !!cell_type, tissue == !!tissue) %>%
select(mouse_id_i, mouse_id_j, cor_coef)
# Add a diagonal to the correlation matrix (each mouse has correlation 1 with itself)
data_subset <- bind_rows(data_subset,
tibble(mouse_id_i = unique(c(data_subset$mouse_id_i, data_subset$mouse_id_j))) %>%
mutate(mouse_id_j = mouse_id_i, cor_coef = 1)) %>%
arrange(mouse_id_i, mouse_id_j)
wide_format_correlations <- data_subset %>%
pivot_wider(names_from = mouse_id_j, values_from = cor_coef)
correlation_matrix <- as.matrix(wide_format_correlations[colnames(wide_format_correlations) != 'mouse_id_i'])
rownames(correlation_matrix) <- wide_format_correlations$mouse_id_i
# Fill lower triangle
for(i in 1:nrow(correlation_matrix)){
for(j in 1:ncol(correlation_matrix)){
if(j < i){
correlation_matrix[i,j] <- correlation_matrix[j,i]
}
}
}
# Convert correlations into distances.
dist_matrix <- as.dist(1 - correlation_matrix)
cluster <- hclust(dist_matrix, method = 'complete')
dendrogram <- as.dendrogram(cluster)
# Within topological constraints of dendrogram, tries to order mice with day 8 on top, then day 16,
#etc.
leaf_weights <- 1/as.integer(str_extract(cluster$labels, '[0-9]+'))
dendrogram <- reorder(dendrogram,
wts = leaf_weights)
annotation <- get_info_from_mouse_id(
tibble(mouse_id = cluster$labels)
)
dendro_heatmap <- heatmaply(x = correlation_matrix,
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "blue",
high = "red",
midpoint = 0,
limits = c(-1, 1)
),
Rowv = dendrogram,
Colv = dendrogram,
row_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
col_side_colors = annotation %>% select(group_controls_pooled) %>%
rename(group = group_controls_pooled),
seriate = 'none',
key.title = color_key_title)
return(dendro_heatmap)
}
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
# ----- Dendrograms and heatmaps based on correlation in V gene frequency deviations from naive repertoire -------
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'PC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'GC',
tissue = 'LN')
get_vgene_freq_correlation_clustering(pairwise_correlations = pairwise_correlations,
metric = 'freq_ratios',
cell_type = 'mem',
tissue = 'LN')
setwd("/Volumes/cobey/mvieira/psc_repertoire/code")
library(tidyverse)
library(cowplot)
theme_set(theme_cowplot())
igphyml_files <- list.files('../results/igphyml/', recursive = T, pattern = 'stats', full.names = T)
divergence_files <- list.files('../results/aa_divergence/', full.names = T)
# Import only divergence results for clones with IgPhyml results
# (so we only look at the top clones, excluding any that have fewer than 2 seqs.)
igphyml_clone_ids <- unlist(lapply(as.list(igphyml_files),
FUN = function(x){
clone_id = rev(strsplit(x,'/')[[1]])[1]
clone_id = str_remove(clone_id, '_noCDR3_igphyml_stats.tab')
}))
divergence_files_clone_ids <- unlist(lapply(as.list(divergence_files),
FUN = function(x){
clone_id = rev(strsplit(x,'/')[[1]])[1]
clone_id = str_remove(clone_id, '_pairwise_divergence.csv')
clone_id = str_remove(clone_id,'_CDR3')
}))
divergence_files <- divergence_files[divergence_files_clone_ids %in% igphyml_clone_ids]
igphyml_results <- lapply(as.list(igphyml_files),
FUN = function(path){
dataset <- str_split(path,'\\/')[[1]]
dataset <- dataset[length(dataset)]
clone_number <- str_extract(dataset, 'clone_[0-9]+')
dataset <- str_remove(dataset, '_clone_[0-9]+_.*')
as_tibble(read.table(path, sep = '\t', header = T)) %>%
slice(1) %>%
select(-CLONE) %>%
mutate(dataset = dataset, clone_number = clone_number) %>%
select(dataset, clone_number, everything())
})
igphyml_results <- bind_rows(igphyml_results) %>%
arrange(dataset)
write_csv(igphyml_results,'../results/combined_igphyml_results.csv')
long_format_tibble <- bind_rows(igphyml_results %>% select(dataset, clone_number, OMEGA_FWR_MLE, OMEGA_FWR_LCI,
OMEGA_FWR_UCI) %>%
dplyr::rename(omega_estimate = OMEGA_FWR_MLE,
omega_lower = OMEGA_FWR_LCI,
omega_upper = OMEGA_FWR_UCI) %>%
mutate(region = 'FWR') %>% select(dataset, clone_number, region, everything()),
igphyml_results %>% select(dataset, clone_number, OMEGA_CDR_MLE, OMEGA_CDR_LCI,
OMEGA_CDR_UCI) %>%
dplyr::rename(omega_estimate = OMEGA_CDR_MLE,
omega_lower = OMEGA_CDR_LCI,
omega_upper = OMEGA_CDR_UCI) %>%
mutate(region = 'CDR') %>% select(dataset, clone_number, region, everything()))
dNdS_plot <- long_format_tibble %>%
ggplot(aes(x = dataset, y = omega_estimate, color = region)) +
geom_pointrange(size = 1, aes(ymin = omega_lower, ymax = omega_upper),
position = position_jitter(width = 0.2)) +
ylab('dN/dS estimate from IgPhyML for the biggest clone(s)') +
xlab('Patient') +
scale_x_discrete(labels = function(x){str_remove(x,'_HC')}) +
geom_hline(yintercept = 1, linetype = 2) +
background_grid() +
theme(legend.position = c(0.9,0.9)) +
scale_y_log10()
save_plot('../figures/IgPhyML_dNdS.pdf',dNdS_plot,
base_width = 12, base_height = 6)
divergence_results <- lapply(as.list(divergence_files),
FUN = function(path){
dataset <- str_split(path,'\\/')[[1]]
dataset <- dataset[length(dataset)]
clone_number <- str_extract(dataset, 'clone_[0-9]+')
dataset <- str_remove(dataset, '_clone_[0-9]+_.*')
if(grepl('CDR3', path)){
region = 'CDR3'
}else{
region = 'whole sequence'
}
read_csv(path) %>%
mutate(dataset = dataset, clone_number = clone_number, region = region) %>%
select(dataset, clone_number, region, everything())
})
# Export divergence results for the same clones we did IgPhyml
divergence_results <- bind_rows(divergence_results) %>%
mutate(region = factor(region, levels = c('whole sequence','CDR3')))
#divergence_results <- left_join(igphyml_results %>% select(dataset, clone_number), divergence_results) %>%
#  filter(!is.na(mean_divergence))
write_csv(divergence_results, '../results/divergence_results.csv')
divergence_results_pl <- divergence_results %>%
filter(reference == 'NAIVE') %>%
ggplot(aes(x = dataset, y = mean_divergence)) +
geom_pointrange(size = 1, aes(ymin = min_divergence, ymax = max_divergence),
position = position_jitter(width = 0.2)) +
ylab('Mean divergence from naive ancestor\n(bar shows min and max)') +
xlab('Patient') +
scale_x_discrete(labels = function(x){str_remove(x,'_HC')}) +
background_grid() +
theme(legend.position = c(0.9,0.9),
axis.text.x = element_text(size = 9)) +
facet_wrap('region')
save_plot('../figures/divergence_from naive.pdf', divergence_results_pl,
base_width = 20, base_height = 8)
library(dplyr)
library(readr)
library(stringr)
selected_clones <- read_csv('selected_clones.csv')
selected_clones
?mapply
selected_clones
dataset = 'PSC19D'
clone_id = 19
paste0('../results/aa_divergence/', dataset, '_clone_', clone_id, '_pairwise_divergence.csv')
read_csv(paste0('../results/aa_divergence/', dataset, '_clone_', clone_id, '_pairwise_divergence.csv'))
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')
)
clone_id = 29
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')
)
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3')
)
selected_clones
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3') %>%
) %>%
mutate(sample_code = dataset, clone = clone_id) %>%
select(sample_code, clone, everything())
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3')
) %>%
mutate(sample_code = dataset, clone = clone_id) %>%
select(sample_code, clone, everything())
divergence_selected_clones <- mapply (function(dataset, clone_id){
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3')
) %>%
mutate(sample_code = dataset, clone = clone_id) %>%
select(sample_code, clone, everything())
})
selected_clones %>%
select(sample_code, clone) %>%
unique()
unique_clones <- selected_clones %>%
select(sample_code, clone) %>%
unique()
unique_clones$sample_code,
unique_clones$sample_code
length(unique_clones$sample_code)
divergence_selected_clones <- mapply (
FUN = function(dataset, clone_id){
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3')
) %>%
mutate(sample_code = dataset, clone = clone_id) %>%
select(sample_code, clone, everything())},
dataset = unique_clones$sample_code,
clone_id = unique_clones$clone
)
divergence_selected_clones
divergence_selected_clones <- mapply (
FUN = function(dataset, clone_id){
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3')
) %>%
mutate(sample_code = dataset, clone = clone_id) %>%
select(sample_code, clone, everything())},
dataset = unique_clones$sample_code,
clone_id = unique_clones$clone,
SIMPLIFY = F
)
divergence_selected_clones
divergence_selected_clones <- bind_rows(divergence_selected_clones)
write_csv(divergence_selected_clones, '../results/divergence_selected_clones.csv')
divergence_selected_clones <- mapply (
FUN = function(dataset, clone_id){
bind_rows(
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_pairwise_divergence.csv')) %>%
mutate(region = 'whole sequence'),
read_csv(paste0('../results/aa_divergence/', dataset, '_HC_clone_', clone_id, '_CDR3_pairwise_divergence.csv')) %>%
mutate(region = 'CDR3')
) %>%
mutate(sample_code = dataset, clone = clone_id) %>%
select(sample_code, clone, region, reference, everything())},
dataset = unique_clones$sample_code,
clone_id = unique_clones$clone,
SIMPLIFY = F
)
divergence_selected_clones <- bind_rows(divergence_selected_clones)
write_csv(divergence_selected_clones, '../results/divergence_selected_clones.csv')
